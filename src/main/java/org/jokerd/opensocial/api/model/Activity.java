package org.jokerd.opensocial.api.model;

import java.util.List;

import org.ubimix.commons.json.JsonObject;

/**
 * An OpenSocial Activity represents a short summary or notification of a
 * timestamped event, often with pointers for more information. Activities are
 * rendered with a title and an optional activity body. The title and body may
 * be set directly as strings when calling opensocial.newActivity. However, it
 * is usually beneficial to create activities using Message Templates for the
 * title and body. Users have many activities in their activity streams, and
 * containers may not show every activity that is visible to a user. To help
 * display large numbers of activities, containers summarize a list of
 * activities from a given source to a single entry. You can provide Activity
 * Summaries to customize the text shown when multiple activities are
 * summarized. If no customization is provided, a container may ignore your
 * activities altogether or provide default text such as
 * "Bob changed his status message + 20 other events like this."
 * <ul>
 * <li>Activity Summaries always summarize around a specific key in a key/value
 * pair. This is so that the summary can say something concrete (this is clearer
 * in the example below).</li>
 * <li>Other variables have synthetic "Count" variables created with the total
 * number of items summarized.</li>
 * <li>Message ID of the summary is the message ID of the main template + ":" +
 * the data key</li>
 * </ul>
 * 
 * <pre>
 * Example summaries:
 * <messagebundle>
 *     <msg name="LISTEN_TO_THIS_SONG:Artist">
 *         ${Subject.Count} of your friends have suggested listening to songs
 *         by ${Artist}!
 *     </msg>
 *     <msg name="LISTEN_TO_THIS_SONG:Song">
 *         ${Subject.Count} of your friends have suggested listening to ${Song}
 *     !</msg>
 *     <msg name="LISTEN_TO_THIS_SONG:Subject">
 *         ${Subject.DisplayName} has recommended ${Song.Count} songs to you.
 *     </msg>
 * </messagebundle>
 * </pre>
 * 
 * <pre>
 * A minimal Activity example:
 * 
 * application/json representation:
 * 
 * {
 *  "id" : "http://example.org/activities/example.org:87ead8dead6beef/self/af3778",
 *  "title" : "&lt;a href=\"foo\">some activity&lt;/a>",
 *  "updated" : "2008-02-20T23:35:37.266Z",
 *  "body" : "Some details for some activity",
 *  "bodyId" : "383777272",
 *  "url" : "http://api.example.org/activity/feeds/.../af3778",
 *  "userId" : "example.org:34KJDCSKJN2HHF0DW20394"
 * }
 * </pre>
 * 
 * @author kotelnikov
 */
// http://opensocial-resources.googlecode.com/svn/spec/1.0/Social-Data.xml#Activity
@Deprecated
public class Activity extends DataObject {

    public static IJsonValueFactory<Activity> FACTORY = new IJsonValueFactory<Activity>() {
        @Override
        public Activity newValue(Object object) {
            return new Activity().setJsonObject(object);
        }
    };

    /**
     * Specifying the application that this activity is associated with.
     */
    public ObjectId getAppId() {
        return getValue("appId", ObjectId.FACTORY);
    }

    /**
     * Returns the activity's body, a string specifying an optional expandedk
     * version of an activity.
     */
    public String getBody() {
        return getString("body");
    }

    /**
     * Returns the activity's body ID, a string specifying the body template
     * message ID in the accompanying gadget specification.
     */
    public ObjectId getBodyId() {
        return getValue("bodyId", ObjectId.FACTORY);
    }

    /**
     * An optional ID generated by the posting application.
     */
    public ObjectId getExternalId() {
        return getValue("externalId", ObjectId.FACTORY);
    }

    /**
     * Returns the activity's unique identifier.
     */
    public ObjectId getId() {
        return getValue("id", ObjectId.FACTORY);
    }

    /**
     * Any photos, videos, or images that should be associated with the
     * activity. Higher priority ones are higher in the list.
     */
    public List<MediaItem> getMediaItems() {
        return getList("mediaItems", MediaItem.FACTORY);
    }

    /**
     * Specifying the time at which this activity took place in milliseconds
     * since the epoch.
     */
    public int getPostedTime() {
        return getInteger("postedTime", -1);
    }

    /**
     * A number between 0 and 1 representing the relative priority of this
     * activity in relation to other activities from the same source.
     */
    public float getPriority() {
        return (float) getDouble("priority", -1);
    }

    /**
     * A number between 0 and 1 representing the relative priority of this
     * activity in relation to other activities from the same source.
     */
    public Activity getPriority(float value) {
        setValue("priority", value);
        return this;
    }

    /**
     * Specifying the URL for the stream's favicon.
     */
    public String getStreamFaviconUrl() {
        return getString("streamFaviconUrl");
    }

    /**
     * Specifying the stream's source URL.
     */
    public String getStreamSourceUrl() {
        return getString("streamSourceUrl");
    }

    /**
     * Specifing the title of the stream.
     */
    public String getStreamTitle() {
        return getString("streamTitle");
    }

    /**
     * Specifying the stream's URL.
     */
    public String getStreamUrl() {
        return getString("streamUrl");
    }

    /**
     * A map of custom key/value pairs associated with this activity. These are
     * used for evaluation in templates. The data has type Map<String, Object>.
     * The object may be either a String or an opensocial.Person. When passing
     * in a person with key PersonKey, can use the following replacement
     * variables in the template:
     * <ul>
     * <li>PersonKey.DisplayName - Display name for the person</li>
     * <li>PersonKey.ProfileUrl. URL of the person's profile</li>
     * <li>PersonKey.Id - The ID of the person</li>
     * <li>PersonKey - Container may replace with DisplayName, but may also
     * optionally link to the user.</li>
     * </ul>
     */
    public JsonObject getTemplateParams() {
        return getValue("templateParams", JsonObject.FACTORY);
    }

    /**
     * Returns the activity's title, a string specifying the primary text of an
     * activity.
     */
    public String getTitle() {
        return getString("title");
    }

    /**
     * Returns the activity's title ID, a string specifying the title template
     * message ID in the accompanying gadget specification.
     */
    public ObjectId getTitleId() {
        return getValue("titleId", ObjectId.FACTORY);
    }

    /**
     * Specifying the URL that represents this activity.
     */
    public String getUrl() {
        return getString("url");
    }

    /**
     * ID of the user who this activity is for.
     */
    public UserId getUserId() {
        return getValue("userId", UserId.FACTORY);
    }

    /**
     * Specifying the application that this activity is associated with.
     * 
     * @param appId application ID to set
     */
    public Activity setAppId(String appId) {
        setValue("appId", appId);
        return this;
    }

    /**
     * Sets the activity's body, a string specifying an optional expanded
     * version of an activity
     * 
     * @param body body to set
     */
    public Activity setBody(String body) {
        setValue("body", body);
        return this;
    }

    /**
     * Sets the activity's body ID, a string specifying the body template
     * message ID in the accompanying gadget specification.
     * 
     * @param bodyId body ID to set
     */
    public Activity setBodyId(String bodyId) {
        setValue("bodyId", bodyId);
        return this;
    }

    /**
     * An optional ID generated by the posting application.
     */
    public Activity setExternalId(Object value) {
        setValue("externalId", value);
        return this;
    }

    /**
     * Any photos, videos, or images that should be associated with the
     * activity. Higher priority ones are higher in the list.
     */
    public Activity setMediaItems(List<MediaItem> values) {
        setValue("mediaItems", values);
        return this;
    }

    /**
     * Any photos, videos, or images that should be associated with the
     * activity. Higher priority ones are higher in the list.
     */
    public Activity setMediaItems(MediaItem... values) {
        setValue("mediaItems", values);
        return this;
    }

    /**
     * Specifying the time at which this activity took place in milliseconds
     * since the epoch.
     */
    public Activity setPostedTime(int value) {
        setValue("postedTime", value);
        return this;
    }

    /**
     * Specifying the URL for the stream's favicon.
     */
    public Activity setStreamFaviconUrl(String value) {
        setValue("streamFaviconUrl", value);
        return this;
    }

    /**
     * Specifying the stream's source URL.
     */
    public Activity setStreamSourceUrl(String value) {
        setValue("streamSourceUrl", value);
        return this;
    }

    /**
     * Specifing the title of the stream.
     */
    public Activity setStreamTitle(String value) {
        setValue("streamTitle", value);
        return this;
    }

    /**
     * Specifying the stream's URL.
     */
    public Activity setStreamUrl(String value) {
        setValue("streamUrl", value);
        return this;
    }

    /**
     * A map of custom key/value pairs associated with this activity. These are
     * used for evaluation in templates. The data has type Map<String, Object>.
     * The object may be either a String or an opensocial.Person. When passing
     * in a person with key PersonKey, can use the following replacement
     * variables in the template:
     * <ul>
     * <li>PersonKey.DisplayName - Display name for the person</li>
     * <li>PersonKey.ProfileUrl. URL of the person's profile</li>
     * <li>PersonKey.Id - The ID of the person</li>
     * <li>PersonKey - Container may replace with DisplayName, but may also
     * optionally link to the user.</li>
     * </ul>
     */
    public Activity setTemplateParams(JsonObject value) {
        setValue("templateParams", value);
        return this;
    }

    /**
     * Sets the activity's title, a string specifying the primary text of an
     * activity.
     * 
     * @param title title to set
     */
    public Activity setTitle(String title) {
        setValue("title", title);
        return this;
    }

    /**
     * Sets the activity's title ID, a string specifying the title template
     * message ID in the accompanying gadget specification.
     * 
     * @param titleId title ID to set
     */
    public Activity setTitleId(ObjectId titleId) {
        setValue("titleId", titleId);
        return this;
    }

    /**
     * Specifying the URL that represents this activity.
     */
    public Activity setUrl(String value) {
        setValue("url", value);
        return this;
    }

    /**
     * Sets the ID of the user who this activity is for.
     * 
     * @param userId user ID to set
     */
    public Activity setUserId(UserId userId) {
        setValue("userId", userId);
        return this;
    }
}
